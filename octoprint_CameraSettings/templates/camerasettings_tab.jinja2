  
{% assets "js_client" %}
<script src="{{ url_for("static", filename="js/lib/jquery/jquery.min.js") }}"></script>
<script src="{{ url_for("static", filename="js/lib/lodash.min.js") }}"></script>
<script type="text/javascript" src="{{ url_for("static", filename="webassets/packed_client.js") }}"></script>
{% endassets %}

{% macro menu_control(control_var, control_name) %}
<div class="row-fluid" data-bind="visible: controls.{{ control_var }}.use">
    <div class="span4 text-right">{{ control_name }}</div>
    <div class="span4">
        <select
            class="input-block-level"
            data-bind="value: controls.{{ control_var }}.value, 
                options: controls.{{ control_var }}.values, 
                optionsText: (val) => val.desc, optionsValue: (val) => val.value" >
        </select>
    </div>
</div>
{% endmacro %}

{% macro bool_control(control_var, control_name) %}
<div class="row-fluid" data-bind="visible: controls.{{ control_var }}.use">
    <div class="span4 text-right">{{ control_name }}</div>
    <div class="span4">
        <input type="checkbox" class="input-block-level" data-bind="checked: controls.{{ control_var }}.value"></input>
    </div>
</div>
{% endmacro %}

{% macro slider_control(control_var, control_name) %}
<div class="row-fluid" data-bind="visible: controls.{{ control_var }}.use">
    <div class="span4 text-right">{{ control_name }}</div>
    <div class="span2">
        <input
            class="input-block-level"
            type="number"
            data-bind="value: controls.{{ control_var }}.value, 
                attr: { min: controls.{{ control_var }}.min, 
                    max: controls.{{ control_var }}.max, 
                    step: controls.{{ control_var }}.step }">
            </input> 
    </div>
    <div class="span6">
        <input
            class="input-block-level"
            type="range"
            data-bind="value: controls.{{ control_var }}.value,
                attr: { min: controls.{{ control_var }}.min, 
                    max: controls.{{ control_var }}.max, 
                    step: controls.{{ control_var }}.step }">
        </input>
    </div>
</div>
{% endmacro %}
<div>
    <h3>Camera Settings</h3>
    <div style="text-align:center;" data-bind="visible: settings.settings.plugins.camerasettings.show_preview">
        <img 
            data-bind="attr: { src: cameraSrc }, style: { transform: `scaleX(${settings.settings.webcam.flipH() ? -1: 1}) scaleY(${settings.settings.webcam.flipV() ? -1: 1})`}"
            style="background-color: black; width:90%; min-height: 200px; margin-bottom: 10px;">
    </div>
    <div class="row-fluid">
        <div class="span4 text-right">Camera</div>
        <div class="span4">
            <select class="input-block-level" id="camerasettings-device" data-bind="value: selectedDevice, options: cameras, optionsText: (camera) => camera.camera, optionsValue: (camera) => camera.device" ></select>
        </div>
    </div>
    <div class="alert alter-block" data-bind="visible: showUnkControlsWarning">
        <strong>Warning:</strong> your camera has controls that have not been implemented yet. Please open an issue (link here) and include the following information:
        <br><br>
        Camera Control Information: <button class="btn btn-primary" data-bind="click: copyUnkToClipboard"><i class="fas fa-copy"></i> Copy to Clipboard</button>
    </div>
    <div class="row-fluid">
        <div class="span4 text-right">Preset</div>
        <div class="span5">
            <input data-bind="value: presetName"></input>
        </div>
        <div class="span3">
            <button style="width: 50%;" class="btn" data-bind="enable: presetName() !== undefined, click: savePreset"><i class="fas fa-download"></i></button>
        </div>
    </div>
    <div class="row-fluid">
        <div class="span4 text-right">
            &nbsp;
        </div>
        <div class="span5">
            <select size="3" data-bind="options: settings.settings.plugins.camerasettings.presets, optionsText: (preset) => preset.name, optionsValue: (preset) => preset.name, value: presetListName "></select>
        </div>
        <div class="span3">
            <div><button style="width: 50%;" class="btn" data-bind="enable: presetListName() !== undefined, click: loadPreset"><i class="fas fa-upload"></i></button></div>
            <div><button style="width: 50%;" class="btn" data-bind="enable: presetListName() !== undefined, click: deletePreset"><i class="fas fa-trash"></i></button></div>
        </div>
    </div>
</div>
<div style="max-height: 400px; overflow-y: auto; padding-top: 5px;">
{{ bool_control('horizontal_flip', 'Horizontal Flip') }}
{{ bool_control('vertical_flip', 'Vertical Flip') }}
{{ slider_control('rotate', 'Rotation') }}

{{ bool_control('image_stabilization', 'Image Stabilization') }}
{{ menu_control('power_line_frequency', 'Power Line Frequency') }}
{{ menu_control('scene_mode', 'Scene Mode') }}
{{ menu_control('auto_exposure', 'Auto Exposure') }}
{{ menu_control('exposure_auto', 'Auto Exposure') }}
{{ bool_control('exposure_auto_priority', 'Exposure Auto Priority') }}
{{ menu_control('auto_exposure_bias', 'Auto Exposure Bias') }}
{{ menu_control('exposure_metering_mode', 'Exposure Metering Mode') }}
{{ bool_control('exposure_dynamic_framerate', 'Exposure Dynamic Framerate') }}
{{ slider_control('exposure_time_absolute', 'Exposure Time Absolute') }}
{{ slider_control('exposure_absolute', 'Exposure Time Absolute') }}
{{ menu_control('iso_sensitivity_auto', 'ISO Sensitivity Auto') }}
{{ menu_control('iso_sensitivity', 'ISO Sensitivity') }}
{{ slider_control('gain', 'Gain') }}

{{ slider_control('sharpness', 'Sharpness') }}
{{ slider_control('brightness', 'Brightnes') }}
{{ slider_control('contrast', 'Contrast') }}
{{ slider_control('saturation', 'Saturation') }}

{{ menu_control('color_effects', 'Color Effects') }}
{{ slider_control('color_effects_cbcr', 'Color Effects CB/CR') }}
{{ menu_control('white_balance_auto_preset', 'White Balance') }}
{{ bool_control('white_balance_temperature_auto', 'White Balance Auto') }}
{{ slider_control('white_balance_temperature', 'White Balance Temperature') }}
{{ slider_control('blue_balance', 'Blue Balance') }}
{{ slider_control('red_balance', 'Red Balance') }}

{{ slider_control('compression_quality', 'Compression Quality') }}

{{ menu_control('video_bitrate_mode', 'Video Bitrate Mode') }}
{{ slider_control('video_bitrate', 'Video Bitrate') }}

{{ bool_control('repeat_sequence_header', 'Repeat Sequence Header') }}
{{ slider_control('h264_i_frame_period', 'H.264 I-Frame Period')}}
{{ menu_control('h264_level', 'H.264 Level') }}
{{ menu_control('h264_profile', 'H.264 Profile') }}
</div>